{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/js/footer.js","webpack:///./src/js/header.js","webpack:///webpack/bootstrap","webpack:///./src/js/globals/globals.js","webpack:///./src/js/utils/checkWorld.js","webpack:///./src/js/species/species.js","webpack:///./src/js/actions/actions.js","webpack:///./src/js/game.js"],"sourcesContent":["window.addEventListener(\r\n\t'load',\r\n\t() => {\r\n\t\t// let footers = document.querySelectorAll('.footer');\r\n\t\t// // let headerHeights = (headers) => {\r\n\t\t// // \tconsole.log(headers);\r\n\t\t// // \theaderHeight = headers.getBoundingClientRect();\r\n\t\t// // \treturn headerHeight.height;\r\n\t\t// // };\r\n\t\t// const classScrollToggle = (\r\n\t\t// \titem,\r\n\t\t// \tclassName,\r\n\t\t// \tscrollValue = window.scrollY\r\n\t\t// ) => {\r\n\t\t// \tif (scrollValue < scrollValue - item.offsetHeight) {\r\n\t\t// \t\tif (item.classList.contains(className)) {\r\n\t\t// \t\t\titem.classList.remove(className);\r\n\t\t// \t\t}\r\n\t\t// \t} else {\r\n\t\t// \t\titem.classList.add(className);\r\n\t\t// \t}\r\n\t\t// };\r\n\t\t// const iterateToScroll = (items, className) => {\r\n\t\t// \tfor (let i = 0; i < items.length; i++) {\r\n\t\t// \t\twindow.addEventListener('scroll', () => {\r\n\t\t// \t\t\tconsole.log(\r\n\t\t// \t\t\t\t`scroll is ${window.scrollY}`,\r\n\t\t// \t\t\t\tdocument.body.scrollHeight - items[i].offsetHeight\r\n\t\t// \t\t\t);\r\n\t\t// \t\t\tclassScrollToggle(items[i], className);\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// };\r\n\t\t// iterateToScroll(footers, 'footer--active');\r\n\t\t// // iterateToScroll(document.querySelectorAll('.footer'), 'footer--active');\r\n\t\t// // console.log(headerHeights);\r\n\t},\r\n\tfalse\r\n);\r\n","window.addEventListener(\r\n\t'load',\r\n\t() => {\r\n\t\t// let headers = document.querySelectorAll('.header');\r\n\t\t// // let headerHeights = (headers) => {\r\n\t\t// // \tconsole.log(headers);\r\n\t\t// // \theaderHeight = headers.getBoundingClientRect();\r\n\t\t// // \treturn headerHeight.height;\r\n\t\t// // };\r\n\t\t// const classScrollToggle = (\r\n\t\t// \titem,\r\n\t\t// \tclassName,\r\n\t\t// \tscrollValue = window.scrollY\r\n\t\t// ) => {\r\n\t\t// \tif (scrollValue > item.offsetHeight / 2) {\r\n\t\t// \t\titem.classList.add(className);\r\n\t\t// \t} else {\r\n\t\t// \t\tif (item.classList.contains(className)) {\r\n\t\t// \t\t\titem.classList.remove(className);\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// };\r\n\t\t// const iterateToScroll = (items, className) => {\r\n\t\t// \tfor (let i = 0; i < items.length; i++) {\r\n\t\t// \t\twindow.addEventListener('scroll', () => {\r\n\t\t// \t\t\t// console.log(`scroll is ${window.scrollY}`, items[i].offsetHeight);\r\n\t\t// \t\t\tclassScrollToggle(items[i], className);\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// };\r\n\t\t// iterateToScroll(headers, 'header--active');\r\n\t\t// // iterateToScroll(document.querySelectorAll('.footer'), 'footer--active');\r\n\t\t// // console.log(headerHeights);\r\n\t},\r\n\tfalse\r\n);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export let idNumber = 0,\r\n\tlastObserved = '';\r\n\r\nexport const world = {\r\n\tname: 'world',\r\n\tcreatures: [],\r\n\tspecies: [],\r\n\tactions: [],\r\n};\r\n","import { world } from '../globals/globals';\r\n/**\r\n *  @param { string } needle\r\n *  @param { Object } haystack\r\n *\r\n */\r\nexport function checkWorld(needle, haystack) {\r\n\t// In this example, we want to check that a species doesn't exist before doing the thing.\r\n\t//step 1: Check that the world exists.\r\n\tif (!haystack) {\r\n\t\tconsole.error('There is no haystack defined');\r\n\t\treturn null;\r\n\t}\r\n\tif (!needle) {\r\n\t\tconsole.error(`there is no needle defined`);\r\n\t\treturn null;\r\n\t}\r\n\t//step 2: run find in object\r\n\tconst checkResult = haystack.find(({ name }) => name === needle);\r\n\tif (checkResult) {\r\n\t\t// console.warn(`This already exists at ${haystack}`);\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n","import { idNumber, world } from '../globals/globals';\r\nimport { checkWorld } from '../utils/checkWorld';\r\nexport class Species {\r\n\tconstructor(speciesName) {\r\n\t\tif (!speciesName) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.id = idNumber++;\r\n\t\tthis.name = speciesName;\r\n\t\tif (!checkWorld(this.name, world.species)) {\r\n\t\t\tworld.species.push(this);\r\n\t\t}\r\n\t}\r\n}\r\n","import { idNumber, world } from '../globals/globals';\r\nimport { checkWorld } from '../utils/checkWorld';\r\nconst action = {\r\n\tlisten: (event, data) => {\r\n\t\tif (data) {\r\n\t\t\tconsole.log(world.creatures[event.id].lastHeard);\r\n\t\t\treturn (world.creatures[event.id].lastHeard = data);\r\n\t\t\t// console.log(world.creatures[this.id]);\r\n\t\t}\r\n\t\treturn `Nothing was Heard.`;\r\n\t},\r\n\ttalk: (creature, data) => {\r\n\t\tif (data) {\r\n\t\t\tconsole.log(`${creature} said: ${data}`);\r\n\t\t\treturn `${creature} said: ${data}`;\r\n\t\t}\r\n\t},\r\n\tobserve: (creature, data) => {\r\n\t\tif (creature) {\r\n\t\t\tlet returnData = console.log(JSON.stringify(creature));\r\n\t\t\tlastObserved = returnData;\r\n\t\t\treturn returnData;\r\n\t\t}\r\n\t\treturn;\r\n\t},\r\n};\r\n\r\n/*\r\n * @class\r\n */\r\n\r\nexport class ActionConstructor {\r\n\t/*\r\n\t * @param {string} actionName The name of the action\r\n\t * @param { function }\r\n\t */\r\n\tconstructor(actionName, functionCallback) {\r\n\t\t// check to see if this action exists\r\n\t\tif (!checkWorld(actionName, world.actions)) {\r\n\t\t\t// this.id = idNumber++;\r\n\t\t\t// this.name = actionName;\r\n\t\t\tlet action = functionCallback;\r\n\t\t\tworld.actions[actionName] = action;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nnew ActionConstructor('listen', (event, data) => {\r\n\tif (data) {\r\n\t\tconsole.log(world.creatures[event.id].lastHeard);\r\n\t\treturn (world.creatures[event.id].lastHeard = data);\r\n\t\t// console.log(world.creatures[this.id]);\r\n\t}\r\n\treturn `Nothing was Heard.`;\r\n});\r\n\r\nnew ActionConstructor('talk', (creature, data) => {\r\n\tif (data) {\r\n\t\tconsole.log(`${creature} said: ${data}`);\r\n\t\treturn `${creature} said: ${data}`;\r\n\t}\r\n});\r\n\r\nnew ActionConstructor('observe', (creature, data) => {\r\n\tif (creature) {\r\n\t\tlet returnData = console.log(JSON.stringify(creature));\r\n\t\t// lastObserved = returnData;\r\n\t\treturn returnData;\r\n\t}\r\n\treturn;\r\n});\r\n","'use strict';\r\nimport { Species } from './species/species';\r\nimport { actions } from './actions/actions';\r\nimport { idNumber, world, lastObserved } from './globals/globals';\r\nimport { checkWorld } from './utils/checkWorld';\r\nwindow.addEventListener(\r\n\t'load',\r\n\t() => {\r\n\t\t//This is the game world object, which controls and builds out everything.\r\n\r\n\t\tlet message = 'Welcome to the game';\r\n\t\tconst gameMessage = (message = message) => {\r\n\t\t\tconsole.log(message);\r\n\t\t};\r\n\t\tgameMessage(message);\r\n\t\tfunction creatureCreate(name, species) {\r\n\t\t\tthis.id = idNumber++;\r\n\t\t\tthis.name = name ? name : 'Doof';\r\n\t\t\tthis.species = species ? new Species(species) : new Species('Doof');\r\n\t\t\tthis.action = world.actions;\r\n\t\t\tthis.lastHeard = this.action.listen();\r\n\t\t\tworld.creatures.push(this);\r\n\t\t}\r\n\t\tlet action = world.actions;\r\n\t\tnew creatureCreate('I', 'Human');\r\n\t\tnew creatureCreate('I', 'Human');\r\n\t\tconst i = world.creatures[0];\r\n\t\ti.action.observe(i);\r\n\t\taction.talk(\r\n\t\t\ti.name,\r\n\t\t\t`Hmmmm, It seems that I can now see what I am. I am a ${i.species}`\r\n\t\t);\r\n\t\taction.talk(i.name, `At least, I think something is different`);\r\n\t\tnew creatureCreate();\r\n\t\tconst doof = world.creatures[1];\r\n\t\taction.talk(i.name, `Here, is my friend ${doof.name}`);\r\n\r\n\t\taction.talk(i.name, `${doof.name} is the first of their kind.`);\r\n\t\taction.talk(\r\n\t\t\ti.name,\r\n\t\t\t`It may be strange, but it is not the first time that something like this has happened.`\r\n\t\t);\r\n\t\taction.talk(i.name, `Back to ${doof.name} for a minute though.`);\r\n\t\taction.talk(\r\n\t\t\ti.name,\r\n\t\t\t`${doof.name} may be named ${doof.name}, but that is not enough. We must first figure out what ${doof.name} is.`\r\n\t\t);\r\n\t\taction.talk(i.name, `${doof.name}, may I ask you, what are you.`);\r\n\t\t// console.log(doof);\r\n\t\tif (doof.lastHeard) {\r\n\t\t\t// console.log(doof.action.listen());\r\n\t\t\t// doof.lastHeard = doof.action.listen(\r\n\t\t\t// \taction.talk(\r\n\t\t\t// \t\ti.name,\r\n\t\t\t// \t\t`${doof.name} seemed to recognize it. I feel something is different.`\r\n\t\t\t// \t)\r\n\t\t\t// );\r\n\t\t\t// console.log(`${doof.name}'s last heard sound was \"${doof.lastHeard}\"`);\r\n\r\n\t\t\ti.lastHeard = i.action.listen(doof.action.talk(doof.name, `Sup`));\r\n\r\n\t\t\tdoof.action.listen(action.talk(i.name, `${doof.name}! You speak! `));\r\n\t\t\t// doof.lastHeard;\r\n\r\n\t\t\ti.lastHeard = i.action.listen(doof.action.talk(doof.name, `Yup`));\r\n\r\n\t\t\tdoof.lastHeard = doof.action.listen(\r\n\t\t\t\taction.talk(i.name, `Can you Tell Us more about yourself?`)\r\n\t\t\t);\r\n\t\t\ti.lastHeard = i.action.listen(doof.action.talk(doof.name, `Yup`));\r\n\r\n\t\t\ti.lastHeard = i.action.listen(\r\n\t\t\t\tdoof.action.talk(doof.name, doof.action.observe(doof))\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\taction.talk(i.name, `Hmmm.`);\r\n\r\n\t\taction.talk(i.name, `I wonder what else we can observe`);\r\n\t\taction.observe(world);\r\n\t\taction.talk(i.name, `I can't seem to affect the world itself.`);\r\n\t\taction.talk(\r\n\t\t\ti.name,\r\n\t\t\t`It seems that I may not manifest myself on this. I need a method!`\r\n\t\t);\r\n\t},\r\n\tfalse\r\n);\r\n"],"names":["window","addEventListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","idNumber","world","name","creatures","species","actions","checkWorld","needle","haystack","find","console","error","Species","constructor","speciesName","this","id","push","ActionConstructor","actionName","functionCallback","action","event","data","log","lastHeard","creature","JSON","stringify","creatureCreate","listen","message","gameMessage","i","observe","talk","doof"],"sourceRoot":""}